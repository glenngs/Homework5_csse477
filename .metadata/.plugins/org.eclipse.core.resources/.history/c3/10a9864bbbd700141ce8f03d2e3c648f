package edu.rosehulman.pluginmanager;

import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.nio.file.WatchService;

import javax.swing.DefaultListModel;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.nio.file.*;

import static java.nio.file.StandardWatchEventKinds.*;
import static java.nio.file.LinkOption.*;

import java.nio.file.attribute.*;
import java.io.*;
import java.util.*;

import edu.rosehulman.plugin.counter.Counter;
import edu.rosehulman.pluginmanager.protocol.IExecutionPane;

public class ListingPanel extends JPanel implements Runnable {

	final JList<IExecutionPane> dataList = new JList<IExecutionPane>();
	private final WatchService watcher;
    private final Map<WatchKey,Path> keys;
	
	public ListingPanel() throws IOException {
		this.watcher = FileSystems.getDefault().newWatchService();
        this.keys = new HashMap<WatchKey,Path>();
        final JLabel label = new JLabel("Update");
        
        grabPlugins();
        dataList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent arg0) {
                if (!arg0.getValueIsAdjusting()) {
                	//TODO Gabe, this is the method you should use to call your code
                	label.setText(dataList.getSelectedValue().toString());
                }
            }
        });
        
        add(dataList);
        add(label);
        
        System.out.println(dataList.getModel().getSize());
    }
	
	public void grabPlugins() throws IOException {
		File dir = new File("plugins");
		System.out.println(dir.getAbsolutePath());
		File [] files = dir.listFiles(new FilenameFilter() {
		    public boolean accept(File dir, String name) {
		        return name.endsWith(".jar");
		    }
		});
		DefaultListModel<IExecutionPane> model = new DefaultListModel<IExecutionPane>();
		for (File jarfile : files) {
		    System.out.println(stripExtension(jarfile.getName()));
		    model.addElement(new Counter(stripExtension(jarfile.getName())));
		}
		dataList.setModel(model);
		registerPath(Paths.get(dir.getAbsolutePath()));
	}

	static String stripExtension (String str) {
        if (str == null) return null;
        int pos = str.lastIndexOf(".");
        if (pos == -1) return str;
        return str.substring(0, pos);
    }

	/**
     * Register the given directory with the WatchService
     */
    private void registerPath(Path dir) throws IOException {
        WatchKey key = dir.register(watcher, ENTRY_CREATE, ENTRY_DELETE, ENTRY_MODIFY);
        keys.put(key, dir);
    }
    
    /**
     * Process all events for keys queued to the watcher
     */
    public void run() {
        for (;;) {

            // wait for key to be signalled
            WatchKey key;
            try {
                key = watcher.take();
            } catch (InterruptedException x) {
                return;
            }

            Path dir = keys.get(key);
            if (dir == null) {
                System.err.println("WatchKey not recognized!!");
                continue;
            }

            for (WatchEvent<?> event: key.pollEvents()) {
                WatchEvent.Kind kind = event.kind();

                // TBD - provide example of how OVERFLOW event is handled
                if (kind == OVERFLOW) {
                    continue;
                }

                // Context for directory entry event is the file name of entry
                WatchEvent<Path> ev = (WatchEvent<Path>) event;
                Path name = ev.context();
                Path child = dir.resolve(name);
                System.out.println();
                System.out.println(name);
                System.out.println(child);

                // print out event
                System.out.format("%s: %s\n", event.kind().name(), child);
                
            }

            // reset key and remove from set if directory no longer accessible
            boolean valid = key.reset();
            if (!valid) {
                keys.remove(key);

                // all directories are inaccessible
                if (keys.isEmpty()) {
                    break;
                }
            }
        }
    }
}
